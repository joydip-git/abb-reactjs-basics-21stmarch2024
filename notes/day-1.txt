S/W s required:
	Visual Studio Code
	Node JS	

React JS
	- SPA (Single Page Application)
	- just a JS based LIBRARY to create Web application UI, i.e. faster UI development library
	- client-side UI devleopment library 
	- Virtual DOM for much faster performance
	- community support

DI, routing, MV-*, axios or JS api "fetch", redux

React frameworks:
	Gatsby, Next JS etc.

1. JavaScript
	a. basics
	b. advanced
	c. new features

1.b. TypeScript - new things in TS

2. Node JS
3. Angular/React/Vue JS


Browsers and JS engine:
chrome: V8 (open-source, C++)
safari: JS Core
firefox: Spidermonkey
edge, opera (chromekit): V8

2009:
Ryan Dahl
JS runtime => node js
angular, react


JS:
diferent types of data in JS?
a. object
b. number (fractional and non-fractional)
c. string (no CHARACTER)
d. boolean
e. function

keywords: undefined, NaN, null, Infinity


int x = 10;
//x=12.34;
x = false

//loosely typed variable (loosely typed language)
//keyword
var x = 10
x = 12.34
x = false

x = 'joydip'

functions:
	syntax => 	
	a. declaration and b. expession

2 step execution process:
1. preparation stage: all decalartions are taken care of (variable or function)
2. execution stage

hoisting: registering the local variables and function declarations (NOT expressions) in an object associated with function execution context, is knonw as hoisting

prototype programming

ECMAScript => guideline for all scripting languages

2015: ES6
keywords: let => declare locally scoped variables
templated string (string template)
class,constructor, extends, super keywords
js modules: 
module formats:
	a. common js (module.exports/require - default format for Node JS)
	b. ES6 module format (import/export statements)
	c. AMD (asynchronous module definition format) 
	d. UMD (universal module definition format)

module loader: understand the dependencies of one module on other module and resolves those depdencies and load the resolved modules in JS runtime (browser or Node JS)
a. common js module loader (understands common js format => part of node js runtime)
b. require js module loader (understands AMD format)
c. systemjs module loader

issues:
1. module format
ES6 module format => common js module format
ES6 module format => AMD module format ["@babel/plugin-transform-modules-amd" => plugin package]

2. code compatibility: ["@babel/preset-env"=> preset package of babel]
ES6+ code => Vanilla JS Code (<ES6 es2/es3/es5)

JS transpiler s/w s: babel
	transformation + compiler
	convert ES6 module to either common js/amd/umd etc.

	feature transformers => 
		class keyword => constructor function 
		super keyword => Call(....)
		extends keyword => 
		....

	module transformers => 


package manager tools:
	a. Node Package Manager (NPM) [installed by default when nodejs is installed]
	b. yarn
	c. bower etc.

package.json file:
	>npm init and answer some questions
	or
	>npm init --yes

package:
	a. global installation [path: C:\Users\<usr-name>\AppData\Roaming\npm]
	>npm install/i <package-name>@<version-no> --location=global
	b. application specific installation

babel:
	plugins for every transformer
	preset => collection of plugins
	ES6+ => vanilla JS [@babel/preset-env]

**incomplete:
	a. arrow function
	b. promise 
	c. async/await












